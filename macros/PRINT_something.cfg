### START PRINT

[gcode_macro START_PRINT]
gcode: 
 
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  {% set bedtemp = params.BED_TEMP|int %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}

  {% if params.BED_TEMP|int > 90 %}
    M140 S{bedtemp}
    CG28
    M106 S200                                         # Turns on the PT-fan
    G1 X{x_wait} Y{y_wait} Z40 F9000                  # Goes to center of the bed
    M190 S{bedtemp}                                # Sets target temp for the bed
   # G4 P600000                                     #waits x min for chamber to heat (600k = 10min, 300k = 5min)
#TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   # Waits for chamber to reach desired temp

# If the bed temp is not over 90c then it skips the heatsoak and just heats up to set temp with a 5min soak.
  {% else %}
    M140 S{bedtemp}
    CG28
    G1 X{x_wait} Y{y_wait} Z40 F9000                # Goes to center of the bed
    M190 S{bedtemp}                              # Sets target temp for the bed
    #G4 P180000                                      # Waits 3 min for the bedtemp to stabilize
  {% endif %}


  #M140 S{BED_TEMP}                                # Start bed heating
  #SET_GCODE_OFFSET Z=0                           # Reset z-offset
  #BED_MESH_CLEAR
  BED_MESH_PROFILE LOAD=default
  M104 S{EXTRUDER_TEMP - 70.0}     #Start nozzle heating to 150c, nozzle will be done first always, resulting in oozing if too hot
  #CG28                                             # Home all axes 
  #M190 S{BED_TEMP}                                # Wait for bed to reach temp
  G28                                              # Second home to negate heat 
  G92 E0                                          # Reset extruder
  G90                                             # Use absolute coordinates
  BED_MESH_CALIBRATE #PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  G1 X0 Y0 Z1 F3000                               # Hover close to bed to prevent oozing 
  #M109 S{EXTRUDER_TEMP}                           # Wait for nozzle to reach temp
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|int}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|int-5}
  #ADAPTIVE_PURGE
  NOZZLE_PRIME_LINE


#---------------------------
### END PRINT

[gcode_macro END_PRINT]
gcode: 

    #Get Printer built volume dimensions 
    {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
    #Fix-up extruder
    G91                                            
    G1 E-2 F2700                                 
    G1 E-1.5 Z0.2 F2400    
    G1 X5 Y5 F6000                               
    G1 Z10                                     
    G90                                      
    #Present print
    {% if (printer.toolhead.position.z) > 60 %} 
        G1 Z{printer.toolhead.position.z + 10} F2000
    {% else %}
        G1 Z{printer.toolhead.position.z + 60} F2000
    {% endif %}
    G1 X{X_MAX - 20} Y{Y_MAX - 20} F6000
    M106 S0                                      
    M104 S0                                       
    M140 S0                                 
    #Disable Steppers
   M84 X Y E
                                             

#---------------------------
### CANCEL PRINT

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    END_PRINT
    BASE_CANCEL_PRINT

#[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#gcode:
#  #M220 S100                  ;Reset Speed factor override percentage to default (100%)
#  #M221 S100                  ;Reset Extrude factor override percentage to default (100%)
#  SAFE_RETRACT
#  SAFE_PARK
#  SET_GCODE_OFFSET Z=0        # Reset z-offset
#  M106 S0                     ;Turn off fan
#  M104 S0                     ;Turn off hotend
##  M140 S0                     ;Turn off bed
 # M84 X Y E                   ;Disable all steppers but Z so gantry doesnt droop into print
 # CANCEL_PRINT_BASE
 
  # G91               ;Relative positioning
  # G1 E-2 F2700      ;Retract a bit
  # G1 E-2 Z0.2 F2400 ;Retract and raise Z
  # G1 X5 Y5 F3000    ;Move to the side a little
  # G1 Z50            ;Raise Z more to get gantry out of the way
  # G90               ;Absolute positioning
  # G1 X0 Y230        ;Present print X=centre Y = bed y axis almost max
  # SET_GCODE_OFFSET Z=0          # Reset z-offset
  # M106 S0           ;Turn off fan
  # M104 S0           ;Turn off hotend
  # M140 S0           ;Turn off bed
  # M84 X Y E         ;Disable all steppers but Z so gantry doesnt droop into print
  # CANCEL_PRINT_BASE
  
#---------------------------
###   RESUME

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#[gcode_macro RESUME]
#description: Resume the actual running print
#rename_existing: RESUME_BASE
#gcode:
#  ##### read E from pause macro #####
#  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#  #### get VELOCITY parameter if specified ####
#  {% if 'VELOCITY' in params|upper %}
#    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#  {%else %}
#    {% set get_params = "" %}
#  {% endif %}
#  ##### end of definitions #####
#  {% if printer.extruder.can_extrude|lower == 'true' %}
#    G91
#    G1 E{E} F2100
#  {% else %}
#    {action_respond_info("Extruder not hot enough")}
#  {% endif %}  
#  RESUME_BASE {get_params}

#---------------------------
### PRINT PAUSE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
## change this if you need more or less extrusion
#variable_extrude: 1.0
#gcode:
  #SAVE_GCODE_STATE NAME=print_pause
  ###### read E from pause macro #####
  #{% set E = printer["gcode_macro PAUSE"].extrude|float %} #read E from pause
  #PAUSE_BASE
  #SAFE_RETRACT
  #SAFE_PARK
  #RESTORE_GCODE_STATE NAME=print_pause

# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#  ##### set park positon for x and y #####
#  # default is your max posion from your printer.cfg
#  {% set x_park = printer.toolhead.axis_minimum.x|float - 5.0 %}   #maximum.x
#  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#  ##### calculate save lift position #####
#  {% set max_z = printer.toolhead.axis_maximum.z|float %}
#  {% set act_z = printer.toolhead.position.z|float %}
#  {% if act_z < (max_z - 50.0) %} #2.0 eikä 50
#      {% set z_safe = 50.0 %}     #2.0
#  {% else %}
#      {% set z_safe = max_z - act_z %}
#  {% endif %}
#  ##### end of definitions #####
#  PAUSE_BASE
#  G91
#  {% if printer.extruder.can_extrude|lower == 'true' %}
#    G1 E-{E} F2100
#  {% else %}
#    {action_respond_info("Extruder not hot enough")}
#  {% endif %}
#  {% if "xyz" in printer.toolhead.homed_axes %}
#    G1 Z{z_safe} F900
#    G90
#    G1 X{x_park} Y{y_park} F6000
#  {% else %}
#    {action_respond_info("Printer not homed")}
#  {% endif %} 

#---------------------------